worker_processes 1; # Number of Nginx worker processes

events {
    worker_connections 1024; # Max connections per worker
}

http {
    # Custom log format to include the backend server address (crucial for visualization)
    log_format custom_log '\$remote_addr - [\$time_local] "\$request" '
                         '\$status \$body_bytes_sent '
                         'Backend: \$upstream_addr';

    # Backend server group definition
    upstream backend_servers {
        # Resolver for dynamic upstream server names (e.g., Docker service names)
        # 127.0.0.11 is Docker's internal DNS server. 'valid=5s' means DNS cache is valid for 5 seconds.
        resolver 127.0.0.11 valid=5s;

        # --- ADDED: Define a shared memory zone for dynamic upstream servers ---
        # 'backend_servers_zone' is the name of the zone, '128k' is its size (e.g., 128 kilobytes)
        zone backend_servers_zone 128k; 
        
        # --- Choose your load balancing method here (uncomment and rebuild Nginx container) ---
        # 1. Round Robin (Default):
        #    This is the default if no specific method is specified.
        #    Just list the servers with 'resolve'.
        # server backend1:8000 resolve;
        # server backend2:8000 resolve;
        # server backend3:8000 resolve;

        # 2. Weighted Round Robin:
        #    Uncomment this block to use. Adjust 'weight' values as needed.
        # server backend1:8000 weight=3 resolve;
        # server backend2:8000 weight=1 resolve;
        # server backend3:8000 weight=1 resolve; 

        # 3. Least Connections:
        #    Uncomment 'least_conn;' directive.
        # least_conn;
        # server backend1:8000 resolve;
        # server backend2:8000 resolve;
        # server backend3:8000 resolve;

        # 4. IP Hash:
        #    Uncomment 'ip_hash;' directive.
        # ip_hash;
        # server backend1:8000 resolve;
        # server backend2:8000 resolve;
        # server backend3:8000 resolve;

        # 5. Generic Hash (e.g., by request URI):
        #    Uncomment 'hash $request_uri consistent;' directive.
        hash $request_uri consistent; # Or hash $cookie_name consistent;
        server backend1:8000 resolve;
        server backend2:8000 resolve;
        server backend3:8000 resolve;

        # 6. Random:
        #    Uncomment 'random;' directive.
        # random;
        # server backend1:8000 resolve;
        # server backend2:8000 resolve;
        # server backend3:8000 resolve;
    }

    upstream dashboard_app {
        resolver 127.0.0.11 valid=5s; # Use Docker's internal DNS resolver
        zone dashboard_app_zone 64k;  # Define a shared memory zone for dynamic resolution
        server dashboard:8050 resolve; # 'dashboard' is the service name in docker-compose, 8050 is its port
    }

    server {
        listen 80;
        access_log /var/log/nginx/access.log custom_log;

        # This location must be defined before the general 'location /' block
        location /_dash-component-suites/ {
            proxy_pass http://dashboard_app/_dash-component-suites/; # Proxy directly to Dash app's asset path
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        }

        # Explicitly proxy Dash's internal API requests to the dashboard app
        location /_dash-layout {
            proxy_pass http://dashboard_app/_dash-layout;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        }

        # Explicitly proxy Dash's internal API requests to the dashboard app
        location /_dash-dependencies {
            proxy_pass http://dashboard_app/_dash-dependencies;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://backend_servers;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            add_header X-Backend-Server \$upstream_addr;
        }

        location /dashboard/ {
            rewrite ^/dashboard/(.*)$ /$1 break; # IMPORTANT: This rewrites the URL

            proxy_pass http://dashboard_app; # No trailing slash here, so it passes the rewritten URI
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        }

        # This location might not be strictly needed if Dash serves all its assets,
        # but can be kept for direct image access if desired.
        location /dashboard_plot.png {
            proxy_pass http://dashboard_app/dashboard_plot.png;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        }
    }
}